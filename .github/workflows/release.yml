name: Release

on:
  push:
    tags:
      - '*.*.*'

jobs:

  getrelease:
    name: Get release
    runs-on: ubuntu-20.04
    outputs:
      versionoutput: ${{ steps.getversiontag.outputs.VERSION }}
    steps:
      - name: Get the tag version
        id: getversiontag
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}


  build:
    name: Build packages
    needs: getrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:

          - os: ubuntu-20.04
            TARGET: ubuntu
            CMD_BUILD: |
              poetry run pyinstaller --onefile config/make_dataset.spec
              zip -j ./dist/plink-pipelines-${{ needs.getrelease.outputs.versionoutput }}_ubuntu-20.zip ./dist/plink-pipelines
            OUT_FILE_NAME: plink-pipelines-${{ needs.getrelease.outputs.versionoutput }}_ubuntu-20.zip
            ASSET_MIME: application/zip

          - os: macos-10.15
            TARGET: macos
            CMD_BUILD: |
              poetry run pyinstaller --onefile config/make_dataset.spec
              zip -j ./dist/plink-pipelines-${{ needs.getrelease.outputs.versionoutput }}_macos.zip ./dist/plink-pipelines
            OUT_FILE_NAME: plink-pipelines-${{ needs.getrelease.outputs.versionoutput }}_macos.zip
            ASSET_MIME: application/zip

          - os: windows-2019
            TARGET: windows
            CMD_BUILD: |
              poetry run pyinstaller --onefile config/make_dataset.spec
              Compress-Archive ./dist/plink-pipelines.exe ./dist/plink-pipelines-${{ needs.getrelease.outputs.versionoutput }}_windows.zip
            OUT_FILE_NAME: plink-pipelines-${{ needs.getrelease.outputs.versionoutput }}_windows.zip
            ASSET_MIME: application/vnd.microsoft.portable-executable

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python 3.8
        uses: actions/setup-python@v2
        with:
          python-version: 3.8

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade setuptools
          pip install poetry==1.1.7
          poetry install

      - name: Build with pyinstaller for ${{matrix.TARGET}}
        run: ${{matrix.CMD_BUILD}}


      - name: Release
        id: release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ./dist/${{ matrix.OUT_FILE_NAME}}
          prerelease: true

  # Currently we are repeating a lot of code from the steps above, but afaik GH actions
  # does currently not have a strong support for composable actions, and mixing
  # matrix configurations with / without containers seems to produce errors
  # See: https://github.community/t/run-matrix-job-on-macos-and-on-ubuntu-in-container/16359/8
  # and https://github.com/actions/runner/issues/646
  build-containers:
    name: Build packages with containers
    needs: getrelease
    runs-on: ${{ matrix.os }}
    container:
      image: ${{ matrix.container }}
    strategy:
      matrix:
        include:

          - name: CentOS 8
            os: ubuntu-20.04
            container: centos:8
            TARGET: CentOS 8
            CMD_BUILD: |
              poetry run pyinstaller --onefile config/make_dataset.spec
              zip -j ./dist/plink-pipelines-${{ needs.getrelease.outputs.versionoutput }}_CentOS-8.zip ./dist/plink-pipelines
            OUT_FILE_NAME: plink-pipelines-${{ needs.getrelease.outputs.versionoutput }}_CentOS-8.zip
            ASSET_MIME: application/zip

          - name: CentOS 7
            os: ubuntu-20.04
            container: centos:7
            TARGET: CentOS 7
            CMD_BUILD: |
              poetry run pyinstaller --onefile config/make_dataset.spec
              zip -j ./dist/plink-pipelines-${{ needs.getrelease.outputs.versionoutput }}_CentOS-7.zip ./dist/plink-pipelines
            OUT_FILE_NAME: plink-pipelines-${{ needs.getrelease.outputs.versionoutput }}_CentOS-7.zip
            ASSET_MIME: application/zip

    steps:
      - name: Set up package managers
        run: |
              yum update -y
              yum install -y epel-release
              yum install -y dnf
              dnf update -y

      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up system dependencies
        run: dnf groupinstall -y "Development Tools"

      - name: Set up Python 3.8
        run: |
          dnf install -y gcc zlib-devel bzip2 bzip2-devel readline-devel sqlite sqlite-devel openssl-devel tk-devel libffi-devel xz-devel
          dnf install -y wget
          wget https://www.python.org/ftp/python/3.8.11/Python-3.8.11.tgz
          tar xzf Python-3.8.11.tgz
          cd Python-3.8.11
          ./configure --enable-optimizations --enable-shared LDFLAGS="-Wl,-rpath /usr/local/lib"
          make altinstall
          cd ..

      - name: Install dependencies
        run: |
          python3.8 --version
          python3.8 -m pip install --upgrade pip
          pip install --upgrade setuptools
          pip install poetry==1.1.7
          poetry env use 3.8
          poetry install

      - name: Build with pyinstaller for ${{matrix.TARGET}}
        run: ${{matrix.CMD_BUILD}}

      - name: Release
        id: release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ./dist/${{ matrix.OUT_FILE_NAME}}
          prerelease: true

  upload:
    name: Upload to PyPI
    needs: [build, build-containers]
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
          architecture: x64
      - run: pip install poetry==1.1.7
      - run: poetry build
      - run: poetry publish --username=__token__ --password=${{ secrets.PYPI_TOKEN }}
