name: Release

on:
  push:
    tags:
      - '*.*.*'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-latest]
        python-version: ['3.12']
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python ${{ matrix.python-version }} on ${{ matrix.os }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up environment
        run: |
          mkdir -p ~/.local/bin
          echo "${HOME}/.local/bin" >> $GITHUB_PATH
      - name: Download and extract plink
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-22.04" ]]; then
            curl -LJO https://s3.amazonaws.com/plink1-assets/plink_linux_x86_64_20230116.zip
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            curl -LJO https://s3.amazonaws.com/plink1-assets/plink_mac_20230116.zip
          fi
          unzip -n plink_*.zip
          rm plink_*.zip
          chmod +x plink
          ./plink --version
          mv plink ~/.local/bin
          plink --version
      - name: Run tests with Python ${{ matrix.python-version }} on ${{ matrix.os }}
        run: |
          pip install tox==4.23.2
          pip install poetry==1.8.3
          tox -e py

  getrelease:
    name: Get release
    needs: test
    runs-on: ubuntu-22.04
    outputs:
      versionoutput: ${{ steps.getversiontag.outputs.VERSION }}
    steps:
      - name: Get the tag version
        id: getversiontag
        run: echo "VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

  build:
    name: Build packages
    needs: getrelease
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        include:
          - os: ubuntu-22.04
            TARGET: ubuntu
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Release
        id: release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          prerelease: true

  upload:
    name: Upload to PyPI
    needs: [build]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          architecture: x64
      - run: pip install poetry==1.8.3
      - run: poetry build
      - run: poetry publish --username=__token__ --password=${{ secrets.PYPI_TOKEN }}